package br.com.jsoft.centralfinanceira.mb.central;

import java.io.Serializable;
import com.xpert.core.crud.AbstractBaseBean;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import br.com.jsoft.centralfinanceira.bo.central.GrupoLojaBO;
import br.com.jsoft.centralfinanceira.bo.central.LojaBO;
import br.com.jsoft.centralfinanceira.dao.central.ComissaoCreditoGrupoLojaDAO;
import br.com.jsoft.centralfinanceira.dao.central.ComissaoRecargaGrupoLojaDAO;
import br.com.jsoft.centralfinanceira.dao.central.ExcexBoletoDAO;
import br.com.jsoft.centralfinanceira.dao.central.GrupoLojaCreditoDAO;
import br.com.jsoft.centralfinanceira.dao.central.GrupoLojaDebitoDAO;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.ComissaoCreditoGrupoLoja;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.ComissaoRecargaGrupoLoja;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.ConvenioBoleto;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.ConvenioRecarga;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.Conveniocredigi;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.ExcexBoleto;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.GrupoLoja;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.GrupoLojaCredito;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.GrupoLojaDebito;
import br.com.jsoft.centralfinanceira.modelo.cadastroBasicos.Loja;
import br.com.jsoft.centralfinanceira.modelo.enums.CredDeb;
import br.com.jsoft.centralfinanceira.vo.CreditoEDebitoVO;
import com.xpert.faces.utils.FacesMessageUtils;
import com.xpert.persistence.exception.DeleteException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Juniel
 */
@ManagedBean
@ViewScoped
public class GrupoLojaMB extends AbstractBaseBean<GrupoLoja> implements Serializable {

    @EJB
    private GrupoLojaBO grupoLojaBO;

    @EJB
    private LojaBO lojaBO;

    @EJB
    private GrupoLojaCreditoDAO creditoDAO;

    @EJB
    private GrupoLojaDebitoDAO debitoDAO;

    @EJB
    private ExcexBoletoDAO excexBoletoDAO;

    @EJB
    private ComissaoCreditoGrupoLojaDAO comissaoCreditoDAO;

    @EJB
    private ComissaoRecargaGrupoLojaDAO comissaoRecargaDAO;

    private List<Loja> lojas;

    private List<Loja> lojasDeletadas;

    private List<CreditoEDebitoVO> creditosEdebitos;

    private List<CreditoEDebitoVO> creditosEdebitosDeletados;

    private List<ExcexBoleto> excexBoletos;

    private List<ExcexBoleto> excexBoletosDeletados;

    private List<ComissaoCreditoGrupoLoja> comissoesCreditos;

    private List<ComissaoCreditoGrupoLoja> comissoesCreditosDeletados;

    private List<ComissaoRecargaGrupoLoja> comissoesRecargas;

    private List<ComissaoRecargaGrupoLoja> comissoesRecargasDeletados;

    private Loja lojaAdd;

    private String nome;

    private BigDecimal valor;

    private CredDeb tipo = CredDeb.CREDITO;

    private ConvenioBoleto convenioEB;

    private BigDecimal unitarioEB;

    private Conveniocredigi convenioC;

    private BigDecimal unitarioC;

    private ConvenioRecarga convenioR;

    private BigDecimal unitarioR;

    @Override
    public void init() {

        lojas = new ArrayList<Loja>();
        lojasDeletadas = new ArrayList<Loja>();

        creditosEdebitos = new ArrayList<CreditoEDebitoVO>();
        creditosEdebitosDeletados = new ArrayList<CreditoEDebitoVO>();

        excexBoletos = new ArrayList<ExcexBoleto>();
        excexBoletosDeletados = new ArrayList<ExcexBoleto>();

        comissoesCreditos = new ArrayList<ComissaoCreditoGrupoLoja>();
        comissoesCreditosDeletados = new ArrayList<ComissaoCreditoGrupoLoja>();

        comissoesRecargas = new ArrayList<ComissaoRecargaGrupoLoja>();
        comissoesRecargasDeletados = new ArrayList<ComissaoRecargaGrupoLoja>();

        if (getEntity().getId() != null) {
            lojas = lojaBO.getDAO().list("grupoloja_id", getEntity().getId(), "nome");
            excexBoletos = excexBoletoDAO.list("grupoloja_id", getEntity().getId());
            comissoesCreditos = comissaoCreditoDAO.list("grupoloja_id", getEntity().getId());
            comissoesRecargas = comissaoRecargaDAO.list("grupoloja_id", getEntity().getId());

            List<GrupoLojaCredito> creditos = creditoDAO.list("grupoloja_id", getEntity().getId(), "nome");
            List<GrupoLojaDebito> debitos = debitoDAO.list("grupoloja_id", getEntity().getId(), "nome");

            for (GrupoLojaCredito credito : creditos) {
                CreditoEDebitoVO creditoTemp = new CreditoEDebitoVO();
                creditoTemp.setId(credito.getId());
                creditoTemp.setDescricao(credito.getNome());
                creditoTemp.setGrupoLoja(credito.getGrupoLoja());
                creditoTemp.setValor(credito.getValor());
                creditoTemp.setTipo(CredDeb.CREDITO);

                creditosEdebitos.add(creditoTemp);
            }

            for (GrupoLojaDebito debito : debitos) {
                CreditoEDebitoVO debitoTemp = new CreditoEDebitoVO();
                debitoTemp.setId(debito.getId());
                debitoTemp.setDescricao(debito.getNome());
                debitoTemp.setGrupoLoja(debito.getGrupoLoja());
                debitoTemp.setValor(debito.getValor());
                debitoTemp.setTipo(CredDeb.DEBITO);

                creditosEdebitos.add(debitoTemp);
            }
        }

    }

    @Override
    public GrupoLojaBO getBO() {
        return grupoLojaBO;
    }

    @Override
    public String getDataModelOrder() {
        return "nome";
    }

    public List<Loja> getLojas() {
        return lojas;
    }

    public void setLojas(List<Loja> lojas) {
        this.lojas = lojas;
    }

    public List<Loja> getLojasDeletadas() {
        return lojasDeletadas;
    }

    public void setLojasDeletadas(List<Loja> lojasDeletadas) {
        this.lojasDeletadas = lojasDeletadas;
    }

    public List<CreditoEDebitoVO> getCreditosEdebitos() {
        return creditosEdebitos;
    }

    public void setCreditosEdebitos(List<CreditoEDebitoVO> creditosEdebitos) {
        this.creditosEdebitos = creditosEdebitos;
    }

    public List<CreditoEDebitoVO> getCreditosEdebitosDeletados() {
        return creditosEdebitosDeletados;
    }

    public void setCreditosEdebitosDeletados(List<CreditoEDebitoVO> creditosEdebitosDeletados) {
        this.creditosEdebitosDeletados = creditosEdebitosDeletados;
    }

    public List<ExcexBoleto> getExcexBoletos() {
        return excexBoletos;
    }

    public void setExcexBoletos(List<ExcexBoleto> excexBoletos) {
        this.excexBoletos = excexBoletos;
    }

    public List<ExcexBoleto> getExcexBoletosDeletados() {
        return excexBoletosDeletados;
    }

    public void setExcexBoletosDeletados(List<ExcexBoleto> excexBoletosDeletados) {
        this.excexBoletosDeletados = excexBoletosDeletados;
    }

    public List<ComissaoCreditoGrupoLoja> getComissoesCreditos() {
        return comissoesCreditos;
    }

    public void setComissoesCreditos(List<ComissaoCreditoGrupoLoja> comissoesCreditos) {
        this.comissoesCreditos = comissoesCreditos;
    }

    public List<ComissaoCreditoGrupoLoja> getComissoesCreditosDeletados() {
        return comissoesCreditosDeletados;
    }

    public void setComissoesCreditosDeletados(List<ComissaoCreditoGrupoLoja> comissoesCreditosDeletados) {
        this.comissoesCreditosDeletados = comissoesCreditosDeletados;
    }

    public List<ComissaoRecargaGrupoLoja> getComissoesRecargas() {
        return comissoesRecargas;
    }

    public void setComissoesRecargas(List<ComissaoRecargaGrupoLoja> comissoesRecargas) {
        this.comissoesRecargas = comissoesRecargas;
    }

    public List<ComissaoRecargaGrupoLoja> getComissoesRecargasDeletados() {
        return comissoesRecargasDeletados;
    }

    public void setComissoesRecargasDeletados(List<ComissaoRecargaGrupoLoja> comissoesRecargasDeletados) {
        this.comissoesRecargasDeletados = comissoesRecargasDeletados;
    }

    public Loja getLojaAdd() {
        return lojaAdd;
    }

    public void setLojaAdd(Loja lojaAdd) {
        this.lojaAdd = lojaAdd;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public CredDeb getTipo() {
        return tipo;
    }

    public void setTipo(CredDeb tipo) {
        this.tipo = tipo;
    }

    public BigDecimal getValor() {
        return valor;
    }

    public void setValor(BigDecimal valor) {
        this.valor = valor;
    }

    public ConvenioBoleto getConvenioEB() {
        return convenioEB;
    }

    public void setConvenioEB(ConvenioBoleto convenioEB) {
        this.convenioEB = convenioEB;
    }

    public BigDecimal getUnitarioEB() {
        return unitarioEB;
    }

    public void setUnitarioEB(BigDecimal unitarioEB) {
        this.unitarioEB = unitarioEB;
    }

    public Conveniocredigi getConvenioC() {
        return convenioC;
    }

    public void setConvenioC(Conveniocredigi convenioC) {
        this.convenioC = convenioC;
    }

    public BigDecimal getUnitarioC() {
        return unitarioC;
    }

    public void setUnitarioC(BigDecimal unitarioC) {
        this.unitarioC = unitarioC;
    }

    public ConvenioRecarga getConvenioR() {
        return convenioR;
    }

    public void setConvenioR(ConvenioRecarga convenioR) {
        this.convenioR = convenioR;
    }

    public BigDecimal getUnitarioR() {
        return unitarioR;
    }

    public void setUnitarioR(BigDecimal unitarioR) {
        this.unitarioR = unitarioR;
    }

    public void addReceitaDespesa() {
        CreditoEDebitoVO creditoDebitoTemp = new CreditoEDebitoVO();
        if (nome != null && valor != null && tipo != null) {

            if (nome.equals("")) {
                FacesMessageUtils.error("O campo nome deve ser preenchido!");
            } else {
                if (valor.compareTo(BigDecimal.ZERO) == 0) {
                    FacesMessageUtils.error("O valor não pode ser igual a 0 (Zero)!");
                } else {
                    if (verificaNomeIgual(nome, tipo)) {
                        FacesMessageUtils.error("Não é permitido Crédito/Débito com mesmo nome e tipo!");
                    } else {
                        creditoDebitoTemp.setGrupoLoja(getEntity());
                        creditoDebitoTemp.setDescricao(nome);
                        creditoDebitoTemp.setValor(valor);
                        creditoDebitoTemp.setTipo(tipo);

                        creditosEdebitos.add(creditoDebitoTemp);

                        limpaCamposCD();
                    }
                }
            }
        } else {
            FacesMessageUtils.error("Campos obrigários não preenchidos!");
        }

    }

    public void removerReceitaDespesa(CreditoEDebitoVO removido) {
        if (removido.getId() != null) {
            creditosEdebitosDeletados.add(removido);
            creditosEdebitos.remove(removido);
        } else {
            creditosEdebitos.remove(removido);
        }

    }

    public void addLoja() {
        if (lojaAdd != null) {
            if (verificaLoja(lojaAdd)) {
                FacesMessageUtils.error("Loja já adicionada!");
            } else {
                lojaAdd.setGrupoLoja(getEntity());
                lojas.add(lojaAdd);
                lojaAdd = null;
            }
        } else {
            FacesMessageUtils.error("Loja é obrigatório!");
        }
    }

    public void removerLoja(Loja removida) {
        if (removida.getId() != null) {
            lojasDeletadas.add(removida);
            lojas.remove(removida);
        } else {
            lojas.remove(removida);
        }
    }

    public void addExcBoleto() {
        ExcexBoleto addExcBoleto = new ExcexBoleto();
        if (convenioEB != null && unitarioEB != null) {
            addExcBoleto.setGrupoLoja(getEntity());
            addExcBoleto.setConvenioBoleto(convenioEB);
            addExcBoleto.setUnitario(unitarioEB);

            excexBoletos.add(addExcBoleto);

            convenioEB = null;
            unitarioEB = null;
        } else {
            FacesMessageUtils.error("Campos obrigários não preenchidos!");
        }

    }

    public void removerExcBoleto(ExcexBoleto removida) {
        if (removida.getId() != null) {
            excexBoletosDeletados.add(removida);
            excexBoletos.remove(removida);
        } else {
            excexBoletos.remove(removida);
        }
    }

    public void addComissaoCredito() {
        ComissaoCreditoGrupoLoja addComissao = new ComissaoCreditoGrupoLoja();

        if (convenioC != null && unitarioC != null) {
            addComissao.setGrupoLoja(getEntity());
            addComissao.setConveniocredigi(convenioC);
            addComissao.setUnitario(unitarioC);

            comissoesCreditos.add(addComissao);

            convenioC = null;
            unitarioC = null;
        } else {
            FacesMessageUtils.error("Campos obrigários não preenchidos!");
        }
    }

    public void removerComissaoCredito(ComissaoCreditoGrupoLoja removido) {
        if (removido.getId() != null) {
            comissoesCreditosDeletados.add(removido);
            comissoesCreditos.remove(removido);
        } else {
            comissoesCreditos.remove(removido);
        }
    }

    public void addComissaoRecarga() {
        ComissaoRecargaGrupoLoja addComissao = new ComissaoRecargaGrupoLoja();

        if (convenioR != null && unitarioR != null) {
            addComissao.setGrupoLoja(getEntity());
            addComissao.setConveniorecarga(convenioR);
            addComissao.setUnitario(unitarioR);

            comissoesRecargas.add(addComissao);

            convenioR = null;
            unitarioR = null;
        } else {
            FacesMessageUtils.error("Campos obrigários não preenchidos!");
        }
    }

    public void removerComissaoRecarga(ComissaoRecargaGrupoLoja removido) {
        if (removido.getId() != null) {
            comissoesRecargasDeletados.add(removido);
            comissoesRecargas.remove(removido);
        } else {
            comissoesRecargas.remove(removido);
        }
    }

    @Override
    public void save() {
        if (lojas.size() < 1) {
            FacesMessageUtils.error("É obrigatório associar ao menos uma Loja ao grupo!");
        } else {
            super.save();
            for (Loja loja : lojas) {
                lojaBO.getDAO().saveOrMerge(loja, true);
            }

            for (Loja loja : lojasDeletadas) {
                loja.setGrupoLoja(null);
                lojaBO.getDAO().saveOrMerge(loja, true);
            }

            for (ExcexBoleto eb : excexBoletos) {
                excexBoletoDAO.saveOrMerge(eb, true);
            }

            for (ExcexBoleto eb : excexBoletosDeletados) {
                try {
                    excexBoletoDAO.remove(eb.getId(), true);
                } catch (DeleteException ex) {
                    Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            for (ComissaoCreditoGrupoLoja comissao : comissoesCreditos) {
                comissaoCreditoDAO.saveOrMerge(comissao, true);
            }

            for (ComissaoCreditoGrupoLoja comissao : comissoesCreditosDeletados) {
                try {
                    comissaoCreditoDAO.remove(comissao.getId(), true);
                } catch (DeleteException ex) {
                    Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            for (ComissaoRecargaGrupoLoja comissao : comissoesRecargas) {
                comissaoRecargaDAO.saveOrMerge(comissao, true);
            }

            for (ComissaoRecargaGrupoLoja comissao : comissoesRecargasDeletados) {
                try {
                    comissaoRecargaDAO.remove(comissao.getId(), true);
                } catch (DeleteException ex) {
                    Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            for (CreditoEDebitoVO cd : creditosEdebitos) {
                if (cd.getTipo() == CredDeb.CREDITO) {
                    GrupoLojaCredito credito = new GrupoLojaCredito();
                    credito.setGrupoLoja(cd.getGrupoLoja());
                    if (cd.getId() != null) {
                        credito.setId(cd.getId());
                    }
                    credito.setNome(cd.getDescricao());
                    credito.setValor(cd.getValor());

                    creditoDAO.saveOrMerge(credito, true);
                } else {
                    GrupoLojaDebito debito = new GrupoLojaDebito();
                    debito.setGrupoLoja(cd.getGrupoLoja());
                    if (cd.getId() != null) {
                        debito.setId(cd.getId());
                    }
                    debito.setNome(cd.getDescricao());
                    debito.setValor(cd.getValor());

                    debitoDAO.saveOrMerge(debito, true);
                }
            }

            for (CreditoEDebitoVO cd : creditosEdebitosDeletados) {
                if (cd.getTipo() == CredDeb.CREDITO) {
                    try {
                        creditoDAO.delete(cd.getId());
                    } catch (DeleteException ex) {
                        Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    try {
                        debitoDAO.delete(cd.getId(), true);
                    } catch (DeleteException ex) {
                        Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

    }

    @Override
    public void delete() {

        List<GrupoLojaCredito> creditosRemove = creditoDAO.list("grupoloja_id", getId());

        for (GrupoLojaCredito remove : creditosRemove) {
            try {
                creditoDAO.remove(remove, true);
            } catch (DeleteException ex) {
                Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        List<GrupoLojaDebito> debitosRemove = debitoDAO.list("grupoloja_id", getId());

        for (GrupoLojaDebito remove : debitosRemove) {
            try {
                debitoDAO.remove(remove, true);
            } catch (DeleteException ex) {
                Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        List<Loja> lojasRemove = lojaBO.getDAO().list("grupoloja_id", getId());

        for (Loja remove : lojasRemove) {
            remove.setGrupoLoja(null);
            lojaBO.getDAO().saveOrMerge(remove, true);
        }

        List<ExcexBoleto> excexBoletosRemove = excexBoletoDAO.list("grupoloja_id", getId());

        for (ExcexBoleto remove : excexBoletosRemove) {
            try {
                excexBoletoDAO.remove(remove, true);
            } catch (DeleteException ex) {
                Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        List<ComissaoCreditoGrupoLoja> comissoesCreditosRemove = comissaoCreditoDAO.list("grupoloja_id", getId());

        for (ComissaoCreditoGrupoLoja remove : comissoesCreditosRemove) {
            try {
                comissaoCreditoDAO.remove(remove, true);
            } catch (DeleteException ex) {
                Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        List<ComissaoRecargaGrupoLoja> comissoesRecargasRemove = comissoesRecargas = comissaoRecargaDAO.list("grupoloja_id", getId());

        for (ComissaoRecargaGrupoLoja remove : comissoesRecargasRemove) {
            try {
                comissaoRecargaDAO.remove(remove, true);
            } catch (DeleteException ex) {
                Logger.getLogger(GrupoLojaMB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        super.delete();
    }

    private boolean verificaLoja(Loja loja) {
        for (Loja loja1 : lojas) {
            if (loja1.equals(loja)) {
                return true;
            }
        }
        return false;
    }

    private void limpaCamposCD() {
        nome = null;
        valor = null;
        tipo = CredDeb.CREDITO;
    }

    private boolean verificaNomeIgual(String nome, CredDeb tipo) {
        for (CreditoEDebitoVO cd : creditosEdebitos) {
            if (cd.getDescricao().equals(nome) && cd.getTipo() == tipo) {
                return true;
            }
        }
        return false;
    }

    public BigDecimal totalCD() {
        BigDecimal debito = BigDecimal.ZERO;
        BigDecimal credito = BigDecimal.ZERO;

        for (CreditoEDebitoVO cd : creditosEdebitos) {
            if (cd.getTipo() == CredDeb.CREDITO) {
                credito = credito.add(cd.getValor());
            }
            if (cd.getTipo() == CredDeb.DEBITO) {
                debito = debito.add(cd.getValor());
            }
        }

        return credito.subtract(debito);
    }
}
