{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
 * To change this license header, choose License Headers in Project Properties.\
 * To change this template file, choose Tools | Templates\
 * and open the template in the editor.\
 */\
package br.gov.pi.ati.sisforms.testesefaz;\
\
import com.fincatto.nfe310.NFeConfig;\
import com.fincatto.nfe310.assinatura.AssinaturaDigital;\
import com.fincatto.nfe310.classes.NFAmbiente;\
import com.fincatto.nfe310.classes.NFModelo;\
import com.fincatto.nfe310.classes.NFProtocolo;\
import com.fincatto.nfe310.classes.NFProtocoloInfo;\
import com.fincatto.nfe310.classes.NFUnidadeFederativa;\
import com.fincatto.nfe310.classes.evento.NFEnviaEventoRetorno;\
import com.fincatto.nfe310.classes.lote.envio.NFLoteEnvio;\
import com.fincatto.nfe310.classes.lote.envio.NFLoteEnvioRetorno;\
import com.fincatto.nfe310.classes.lote.envio.NFLoteEnvioRetornoDados;\
import com.fincatto.nfe310.classes.lote.envio.NFLoteEnvioRetornoRecebimentoInfo;\
import com.fincatto.nfe310.classes.lote.envio.NFLoteIndicadorProcessamento;\
import com.fincatto.nfe310.classes.nota.NFNota;\
import com.fincatto.nfe310.classes.nota.NFNotaInfoSuplementar;\
import com.fincatto.nfe310.classes.nota.NFNotaProcessada;\
import com.fincatto.nfe310.classes.nota.assinatura.NFKeyInfo;\
import com.fincatto.nfe310.classes.nota.assinatura.NFSignature;\
import com.fincatto.nfe310.classes.nota.assinatura.NFX509Data;\
import com.fincatto.nfe310.classes.nota.consulta.NFNotaConsultaRetorno;\
import com.fincatto.nfe310.classes.statusservico.consulta.NFStatusServicoConsultaRetorno;\
import com.fincatto.nfe310.parsers.NotaParser;\
import com.fincatto.nfe310.webservices.WSFacade;\
import java.io.FileInputStream;\
import java.io.IOException;\
import java.io.InputStream;\
import java.math.BigDecimal;\
import java.security.KeyManagementException;\
import java.security.KeyStore;\
import java.security.KeyStoreException;\
import java.security.NoSuchAlgorithmException;\
import java.security.UnrecoverableKeyException;\
import java.security.cert.CertificateException;\
\
/**\
 *\
 * @author Juniel\
 */\
public class ClasseTeste \{\
\
    static NFeConfig config = new NFeConfig() \{\
\
        private KeyStore keyStoreCertificado = null;\
        private KeyStore keyStoreCadeia = null;\
\
        @Override\
        public NFUnidadeFederativa getCUF() \{\
            return NFUnidadeFederativa.PI;\
        \}\
\
        @Override\
        public String getCertificadoSenha() \{\
            return "cemi28";\
        \}\
\
        @Override\
        public String getCadeiaCertificadosSenha() \{\
            return "Senha123";\
        \}\
\
        @Override\
        public KeyStore getCertificadoKeyStore() throws KeyStoreException \{\
            if (this.keyStoreCertificado == null) \{\
                this.keyStoreCertificado = KeyStore.getInstance("PKCS12");\
                try (InputStream certificadoStream = new FileInputStream("/Users/KillerBeeTwo/Documents/Controle_de_Estoque/cadeiaCertificados/19843574000150.p12")) \{\
                    this.keyStoreCertificado.load(certificadoStream, this.getCertificadoSenha().toCharArray());\
                \} catch (CertificateException | NoSuchAlgorithmException | IOException e) \{\
                    this.keyStoreCadeia = null;\
                    throw new KeyStoreException("Nao foi possibel montar o KeyStore com a cadeia de certificados", e);\
                \}\
            \}\
            return this.keyStoreCertificado;\
        \}\
\
        @Override\
        public KeyStore getCadeiaCertificadosKeyStore() throws KeyStoreException \{\
            if (this.keyStoreCadeia == null) \{\
                this.keyStoreCadeia = KeyStore.getInstance("JKS");\
                try (InputStream cadeia = new FileInputStream("/Users/KillerBeeTwo/Documents/Controle_de_Estoque/cadeiaCertificados/certificado.jks")) \{\
                    this.keyStoreCadeia.load(cadeia, this.getCadeiaCertificadosSenha().toCharArray());\
                \} catch (CertificateException | NoSuchAlgorithmException | IOException e) \{\
                    this.keyStoreCadeia = null;\
                    throw new KeyStoreException("Nao foi possibel montar o KeyStore com o certificado", e);\
                \}\
            \}\
            return this.keyStoreCadeia;\
        \}\
        \
        public NFAmbiente getAmbiente()\{\
            return NFAmbiente.PRODUCAO;\
        \}\
    \};\
\
    public static void main(String[] args) throws IOException, KeyManagementException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, CertificateException, Exception \{\
//        NFLoteEnvioRetornoDados dadosRetorno;\
//        dadosRetorno.getRetorno().getAmbiente().\
//        \
//        NFLoteEnvioRetorno loteRetorno;\
//        \
//        NFLoteEnvioRetornoRecebimentoInfo recInfo;\
//        \
//        NFLoteEnvio lote = new NFLoteEnvio();\
//        NFNota nota = new NFNota();\
//        NFNotaInfoSuplementar notaSupl;\
//        nota.setIdentificadorLocal(1);\
//\
//        NFLoteEnvio retornoEnvio = new NFLoteEnvio();\
//        NFSignature assinatura = new NFSignature();\
//        NFKeyInfo keyInfo = new NFKeyInfo();\
//        NFX509Data x509Data = new NFX509Data();\
//        x509Data.setX509certificate("");\
//        keyInfo.setData(x509Data);\
//        assinatura.setKeyInfo(keyInfo);\
//        nota.setAssinatura(assinatura);\
//\
//        nota.setInfo(null);\
//        nota.setInfoSuplementar(null);\
//        lote.setNotas(null);\
//        NFStatusServicoConsultaRetorno retorno = new WSFacade(config).consultaStatus(NFUnidadeFederativa.SP, NFModelo.NFE);\
\
//        NFStatusServicoConsultaRetorno retorno = new WSFacade(config).consultaStatus(NFUnidadeFederativa.PI, NFModelo.NFE);\
//        System.out.println(retorno.getStatus());\
//        System.out.println(retorno.getVersaoAplicacao());\
\
//        \
//        NFProtocolo protocolo = new NFProtocolo();\
//        NFProtocoloInfo protocoloInf = new NFProtocoloInfo();\
//        protocolo.setProtocoloInfo(null);\
//        protocolo.setVersao(null);\
//        \
//        \
        // Carregue o xml da nota do local que foi armazenado\
//        final String xmlNotaRecuperada = null;\
// Assine a nota\
//        final String xmlNotaRecuperadaAssinada = new AssinaturaDigital(config).assinarDocumento(xmlNotaRecuperada);\
//// Converta para objeto java\
//        final NFNota notaRecuperadaAssinada = new NotaParser().notaParaObjeto(xmlNotaRecuperadaAssinada);\
//// Crie o objeto NFNotaProcessada\
//        final NFNotaProcessada notaProcessada = new NFNotaProcessada();\
//        notaProcessada.setVersao(new BigDecimal(NFeConfig.VERSAO_NFE));\
//        NFProtocolo protocolo = new NFProtocolo();\
//        NFProtocoloInfo protocoloInfo = new NFProtocoloInfo();\
//        protocoloInfo.setAmbiente(NFAmbiente.PRODUCAO);\
//        protocoloInfo.setChave("2217011984357400015055001000000433100008485");\
//        protocoloInfo.setValidador("9");\
//        protocoloInfo.setDataRecebimento("24/01/2017 13:28");\
//        protocoloInfo.setNumeroProtocolo("422170001061178");\
//        protocoloInfo.setStatus("Confirmada");\
//        protocoloInfo.setVersaoAplicacao("3.10.86");\
//        protocolo.setProtocoloInfo(protocoloInfo);\
//        protocolo.setVersao("1");\
//        notaProcessada.setProtocolo(protocolo);\
//        notaProcessada.setNota(notaRecuperadaAssinada);\
//// Obtenha o xml da nota com protocolo\
//        String xmlNotaProcessadaPeloSefaz = notaProcessada.toString();\
        NFNotaProcessada notaProc = new NFNotaProcessada();\
        NFNotaConsultaRetorno retorno = new WSFacade(config).consultaNota("22170119843574000150550010000004331000084859");\
        System.out.print(retorno.getProtocolo());\
    \}\
\
\}\
}