package br.com.weblicita.bo.cadastro;

import com.xpert.core.crud.AbstractBusinessObject;
import br.com.weblicita.dao.cadastro.RubricaOrcamentariaDAO;
import br.com.weblicita.modelo.cadastro.Estado;
import com.xpert.core.validation.UniqueField;
import com.xpert.core.exception.BusinessException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import br.com.weblicita.modelo.cadastro.RubricaOrcamentaria;
import br.com.weblicita.modelo.controleacesso.Usuario;
import br.com.weblicita.util.SessaoUtils;
import br.com.weblicita.util.Utils;
import com.xpert.core.validation.UniqueFields;
import com.xpert.persistence.query.Restrictions;

/**
 *
 * @author Juniel
 */
@Stateless
public class RubricaOrcamentariaBO extends AbstractBusinessObject<RubricaOrcamentaria> {

    @EJB
    private RubricaOrcamentariaDAO rubricaOrcamentariaDAO;

    @Override
    public RubricaOrcamentariaDAO getDAO() {
        return rubricaOrcamentariaDAO;
    }

    @Override
    public List<UniqueField> getUniqueFields() {
        return new UniqueFields()
                .add("legenda", "orgao");
    }

    @Override
    public void validate(RubricaOrcamentaria rubricaOrcamentaria) throws BusinessException {
    }

    @Override
    public boolean isAudit() {
        return true;
    }

    public List<RubricaOrcamentaria> rubricasPelaLegenda(String nome) {
        Restrictions restrictions = new Restrictions();

        Usuario usuarioAtual = SessaoUtils.getUser();

        restrictions.add("ativo", true);

        restrictions.add("orgao", usuarioAtual.getOrgao());

        if (!Utils.isNullOrEmpty(nome)) {
            restrictions.like("legenda", nome);
        }

        return getDAO().list(restrictions, "legenda");
    }

    public RubricaOrcamentaria rubricaPelaLegenda(String nome) {
        Restrictions restrictions = new Restrictions();

        Usuario usuarioAtual = SessaoUtils.getUser();

        restrictions.add("ativo", true);

        restrictions.add("orgao", usuarioAtual.getOrgao());

        if (!Utils.isNullOrEmpty(nome)) {
            restrictions.like("legenda", nome);
        } else {
            return null;
        }

        return getDAO().unique(restrictions);
    }

}
